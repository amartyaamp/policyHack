/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Kapil Thakkar
 */
public class Challenge extends javax.swing.JFrame
{

    /**
     * Creates new form Challenge
     */
    public Challenge()
    {
        initComponents();

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);

        loadItemsInLabel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        itemList = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Your Challenge is to buy this items:");

        startButton.setText("Get Set Go..!");
        startButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                startButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(itemList, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(startButton)))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(itemList, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(startButton)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_startButtonActionPerformed
    {//GEN-HEADEREND:event_startButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        try
        {
            new StartGame().setVisible(true);
        }
        catch (IOException ex)
        {
            Logger.getLogger(Challenge.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ParseException ex)
        {
            Logger.getLogger(Challenge.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Challenge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Challenge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Challenge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Challenge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Challenge().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel itemList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables

    private void loadItemsInLabel()
    {
        /* Get Items from the database and display */
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.

        Random r = new Random();
        int randomNumber = r.nextInt();
        if (randomNumber < 0)
        {
            randomNumber *= (-1);
        }
        // random number generatd betwen 1 to 3
        randomNumber = (randomNumber % 3) + 2;
        System.out.println("Number of item should be : " + randomNumber);
        //Globals.score = randomNumber * 100;
        java.util.List<Integer> randomNos = new ArrayList<Integer>();

        for (int i = 1; i <= 9; i++)
        {
            randomNos.add(new Integer(i));
        }

        for (int i = 0; i < randomNumber; i++)
        {
            int newRand = r.nextInt();
            if (newRand < 0)
            {
                newRand *= (-1);
            }
            System.out.println("Random generated:" + newRand);
            newRand = newRand % randomNos.size();
            System.out.println("After modulo with " + randomNos.size() + " is " + newRand);
            int getProCode = randomNos.get(newRand);
            Product p = getMeEntry(getProCode);
            randomNos.remove(newRand);
            Globals.productList.add(p);
        }
        String products = "<html>";
        for (Product pr : Globals.productList)
        {
            products = products + pr.getName() + "<br>";
        }

        products += "<br>You will get " + Globals.productList.size() * 15 + " seconds to purchase these items..!! <br> Good Luck! ";
        products += "</html>";

        itemList.setText(products);
    }

    private Product getMeEntry(int proCode)
    {
        Product p = new Product();
        Connection c = null;
        Statement stmt = null;
        try
        {
            Class.forName("org.postgresql.Driver");
            c = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres",
                    "postgres", "password");

            c.setAutoCommit(true);
            stmt = c.createStatement();
            System.out.println("Procode :" + proCode);
            String productSelect = "Select * from products where Category=" + proCode;
            PreparedStatement productSelectPS = c.prepareStatement(productSelect);

            ResultSet rs = productSelectPS.executeQuery();

            if (rs.next())
            {
                p.setName(rs.getString("name"));

                System.out.println("Got Name from DB:: " + p.getName());

                p.setCompany(rs.getString("company"));
                p.setQuantity(rs.getDouble("quantity"));
                p.setUnitofquantity(rs.getString("unitofquantity"));
                p.setPrice(rs.getDouble("price"));
                p.setSellingPrice(p.getPrice());

                SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
                if (rs.getString("mandate") != null)
                {
                    p.setManDate(formatter.parse(rs.getString("manDate")));
                }
                else
                {
                    p.setManDate(null);
                }

                p.setBestbefore(rs.getInt("bestbefore"));

                if (rs.getString("expDate") != null)
                {
                    p.setExpDate(formatter.parse(rs.getString("expDate")));
                }
                else
                {
                    p.setExpDate(null);
                }

                p.setNutrientValue(rs.getString("nutrientValue"));
                p.setVeg(rs.getBoolean("veg"));
                p.setAgmark(rs.getBoolean("agmark"));
                p.setBarcode(rs.getString("barcode"));
                p.setLogo((rs.getString("logo")));
                p.setCategory(rs.getInt("category"));
                //stateSelPS.close();
            }
            else
            {
                System.out.println("No result found");
            }
            rs.close();
            productSelectPS.close();
            stmt.close();
            c.close();
            //System.out.println("Data saved into database");
        }
        catch (Exception e)
        {
            System.out.println("Exception... " + e.getStackTrace() + "...." + e);
        }
        return p;
    }
}
