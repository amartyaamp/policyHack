/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author Kapil Thakkar
 */
class ImagePanel extends JPanel
{

    private BufferedImage image;
    int x, y, height, width;

    public ImagePanel(String imageName, int x, int y, int height, int width)
    {
        this.x = x;
        this.y = y;
        this.height = height;
        this.width = width;
        try
        {
            String imagePath = "\\images\\" + imageName + ".jpg";
            System.out.println("Image Path: " + imagePath);
            image = ImageIO.read(new File("kurkure.jpg"));
        }
        catch (IOException ex)
        {
            // handle exception...
            System.out.println("Could not load Image: " + ex);
        }
    }

    @Override
    protected void paintComponent(Graphics g)
    {
        Toolkit t = Toolkit.getDefaultToolkit();
        Image i = t.getImage("p3.gif");
        super.paintComponent(g);
        g.drawImage(image, x, y, height, width, null); // see javadoc for more info on the parameters            
    }
}

public class StartGame extends javax.swing.JFrame
{

    Product proToBeLoaded;
    Product fake1;
    Product fake2;

    public class MyListener implements ActionListener
    {

        private int count = Globals.productList.size() * Globals.timePerProduct;
        private JLabel label;
        private JFrame currentFrame;

        public MyListener(JLabel label, JFrame currentFrame)
        {
            this.label = label;
            this.currentFrame = currentFrame;
        }

        public void actionPerformed(ActionEvent e)
        {
            count--;
            label.setText("" + count);

            if (count == 0)
            {
                currentFrame.setVisible(false);
                new Checkout().setVisible(true);
            }
        }
    }

    /**
     * Creates new form StartGame
     */
    public StartGame() throws IOException, ParseException
    {
        initComponents();

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);

        // Timer...
        //pass the label into the MyListener constructor
        MyListener listener = new MyListener(timerLabel, this);

        //the timer fires every 1000 MS (1 second)
        //when it does, it calls the actionPerformed() method of MyListener
        Timer timer = new Timer(1000, listener);

        //start the timer
        timer.start();

        loadItemsIntoComboBox();

        // Adding listener for combo box
        //itemCombo.addItemListener(new ItemChangeListener());
        itemCombo.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                try
                {
                    loadImages();
                }
                catch (IOException ex)
                {
                    Logger.getLogger(StartGame.class.getName()).log(Level.SEVERE, null, ex);
                }
                catch (ParseException ex)
                {
                    Logger.getLogger(StartGame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        // Select one default from combo-box
        //itemCombo.setSelectedIndex(0);
        loadImages();
        this.setSize(600, 400);

        System.out.println("...");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cart = new javax.swing.JButton();
        add1 = new javax.swing.JButton();
        prop1 = new javax.swing.JButton();
        prop2 = new javax.swing.JButton();
        add2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        prop3 = new javax.swing.JButton();
        add3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        moneyLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        scoreLabel = new javax.swing.JLabel();
        itemCombo = new javax.swing.JComboBox();
        checkoutButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        timerLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Task: Select the best items");

        jLabel2.setText("jLabel2");

        jLabel3.setText("jLabel3");

        cart.setText("See Cart");
        cart.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cartActionPerformed(evt);
            }
        });

        add1.setText("Add");
        add1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                add1ActionPerformed(evt);
            }
        });

        prop1.setText("See Properties");
        prop1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                prop1ActionPerformed(evt);
            }
        });

        prop2.setText("See Proprties");
        prop2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                prop2ActionPerformed(evt);
            }
        });

        add2.setText("Add");
        add2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                add2ActionPerformed(evt);
            }
        });

        jLabel4.setText("jLabel3");

        prop3.setText("See Proprties");
        prop3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                prop3ActionPerformed(evt);
            }
        });

        add3.setText("Add");
        add3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                add3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Available Money: ");

        moneyLabel.setText("jLabel6");

        jLabel7.setText("Score:");

        scoreLabel.setText("jLabel8");

        itemCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        itemCombo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                itemComboActionPerformed(evt);
            }
        });

        checkoutButton.setText("Checkout");
        checkoutButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                checkoutButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Time Remaining:");

        timerLabel.setText("jLabel8");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prop1)
                            .addComponent(jLabel1)
                            .addComponent(itemCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(add1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prop2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(add2)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(prop3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkoutButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(cart))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel6))
                                        .addGap(29, 29, 29)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(scoreLabel)
                                            .addComponent(moneyLabel)
                                            .addComponent(timerLabel)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(add3)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6)
                    .addComponent(timerLabel))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(moneyLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(scoreLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(itemCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(prop2)
                            .addComponent(prop1)
                            .addComponent(prop3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(add2)
                            .addComponent(add1)
                            .addComponent(add3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cart))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkoutButton)))
                .addContainerGap(150, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void prop1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_prop1ActionPerformed
    {//GEN-HEADEREND:event_prop1ActionPerformed
        // TODO add your handling code here:
        new Properties("Prop for item 1", this, proToBeLoaded).setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_prop1ActionPerformed

    private void prop2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_prop2ActionPerformed
    {//GEN-HEADEREND:event_prop2ActionPerformed
        // TODO add your handling code here:
        new Properties("Prop for item 2", this, fake1).setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_prop2ActionPerformed

    private void prop3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_prop3ActionPerformed
    {//GEN-HEADEREND:event_prop3ActionPerformed
        // TODO add your handling code here:
        new Properties("Prop for item 3", this, fake2).setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_prop3ActionPerformed

    private void itemComboActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_itemComboActionPerformed
    {//GEN-HEADEREND:event_itemComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemComboActionPerformed

    private void cartActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cartActionPerformed
    {//GEN-HEADEREND:event_cartActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new Cart(this).setVisible(true);
    }//GEN-LAST:event_cartActionPerformed

    private void checkoutButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_checkoutButtonActionPerformed
    {//GEN-HEADEREND:event_checkoutButtonActionPerformed
        // TODO add your handling code here:

        if (Globals.productList.size() != Globals.cart.size())
        {
            JOptionPane.showMessageDialog(this, "Please Finish Your Shopping First!!!");
        }
        else
        {
            this.setVisible(false);
            new Checkout().setVisible(true);
        }
    }//GEN-LAST:event_checkoutButtonActionPerformed

    private void add1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_add1ActionPerformed
    {//GEN-HEADEREND:event_add1ActionPerformed
        // TODO add your handling code here:
        if (checkProductPresentInCart(proToBeLoaded))
        {
            JOptionPane.showMessageDialog(this, "You have already purchasd this item...!!!");
            return;
        }
        Globals.cart.add(proToBeLoaded);
        JOptionPane.showMessageDialog(this, "Item Added");
        try
        {
            updateScore(proToBeLoaded);
        }
        catch (IOException ex)
        {
            Logger.getLogger(StartGame.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ParseException ex)
        {
            Logger.getLogger(StartGame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_add1ActionPerformed

    private void add2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_add2ActionPerformed
    {//GEN-HEADEREND:event_add2ActionPerformed
        // TODO add your handling code here:
        if (checkProductPresentInCart(fake1))
        {
            JOptionPane.showMessageDialog(this, "You have already purchasd this item...!!!");
            return;
        }
        Globals.cart.add(fake1);
        JOptionPane.showMessageDialog(this, "Item Added");
        try
        {
            updateScore(fake1);
        }
        catch (IOException ex)
        {
            Logger.getLogger(StartGame.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ParseException ex)
        {
            Logger.getLogger(StartGame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_add2ActionPerformed

    private void add3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_add3ActionPerformed
    {//GEN-HEADEREND:event_add3ActionPerformed
        // TODO add your handling code here:
        if (checkProductPresentInCart(fake2))
        {
            JOptionPane.showMessageDialog(this, "You have already purchasd this item...!!!");
            return;
        }
        Globals.cart.add(fake2);
        JOptionPane.showMessageDialog(this, "Item Added");
        try
        {
            updateScore(fake2);
        }
        catch (IOException ex)
        {
            Logger.getLogger(StartGame.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (ParseException ex)
        {
            Logger.getLogger(StartGame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_add3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(StartGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(StartGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(StartGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(StartGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                try
                {
                    try
                    {
                        new StartGame().setVisible(true);
                    }
                    catch (ParseException ex)
                    {
                        Logger.getLogger(StartGame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                catch (IOException ex)
                {
                    Logger.getLogger(StartGame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add1;
    private javax.swing.JButton add2;
    private javax.swing.JButton add3;
    private javax.swing.JButton cart;
    private javax.swing.JButton checkoutButton;
    private javax.swing.JComboBox itemCombo;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    public javax.swing.JLabel moneyLabel;
    private javax.swing.JButton prop1;
    private javax.swing.JButton prop2;
    private javax.swing.JButton prop3;
    public javax.swing.JLabel scoreLabel;
    private javax.swing.JLabel timerLabel;
    // End of variables declaration//GEN-END:variables

    private void updateScore(Product p) throws IOException, ParseException
    {
        double deductScore = 0;

        if (p.isIsExpired() || !p.isCheckedValidity())
        {
            deductScore += Globals.expiryWt;
        }

        if (!(p.isCheckedAuth() || p.isCheckedBarcode()))
        {
            deductScore += Globals.authWtOrBarCodeWt;
        }

        if (!p.isCheckedMRP())
        {
            deductScore += Globals.mrpWt;
        }
        if (!p.isCheckedMfd())
        {
            deductScore += Globals.mfdWt;
        }
        if (!p.isCheckedNut())
        {
            deductScore += Globals.nutWt;
        }
        if (!p.isCheckedVeg())
        {
            deductScore += Globals.vegWt;
        }
        if (!p.isCheckedQty())
        {
            deductScore += Globals.qtyWt;
        }

        if (p.getLogo().contains("fake"))
        {
            deductScore += 10;
        }

        p.setValueToDeduct(deductScore);
        Globals.availableMoney -= p.sellingPrice;
        loadImages();
    }

    private boolean checkProductPresentInCart(Product p)
    {
        for (Product ca : Globals.cart)
        {
            if (ca.getName() == p.getName())
            {
                return true;
            }
        }
        return false;
    }

    class ItemChangeListener implements ItemListener
    {

        @Override
        public void itemStateChanged(ItemEvent e)
        {
            if (e.getStateChange() == ItemEvent.SELECTED)
            {
                Object item = e.getItem();
                // do something with object
                StartGame g;
                try
                {
                    System.out.println("CALLED...........!!!!!!!!!!!!!!!!!");
                    g = new StartGame();
                    g.loadImages();
                    g.setVisible(true);
                }
                catch (IOException ex)
                {
                    Logger.getLogger(StartGame.class.getName()).log(Level.SEVERE, null, ex);
                }
                catch (ParseException ex)
                {
                    Logger.getLogger(StartGame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }

    private void loadImages() throws IOException, ParseException
    {
        // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        // Get the Products from the database

        // Show Images
        // set Score and available money
        moneyLabel.setText(Double.toString(Globals.availableMoney));
        scoreLabel.setText(Integer.toString(Globals.score));

        int index = itemCombo.getSelectedIndex();

        proToBeLoaded = Globals.productList.get(index);
        fake1 = generateRandomFake(proToBeLoaded);
        fake2 = generateRandomFake(proToBeLoaded);

        System.out.println("Inside Load Images");

        Dimension size = new Dimension(100, 100);

        // Load Image 1
        System.out.println("Image Path...::: images/" + proToBeLoaded.getLogo() + ".jpg");
        ImageIcon icon1 = new ImageIcon("images/" + proToBeLoaded.getLogo() + ".jpg");
        jLabel2.setIcon(icon1);
        jLabel2.setText("");
        jLabel2.setMinimumSize(size);
        jLabel2.setPreferredSize(size);
        jLabel2.setMaximumSize(size);

        // Load Image 2
        ImageIcon icon2 = new ImageIcon("images/" + fake1.getLogo() + ".jpg");
        jLabel3.setIcon(icon2);
        jLabel3.setText("");
        jLabel3.setMinimumSize(size);
        jLabel3.setPreferredSize(size);
        jLabel3.setMaximumSize(size);

        // Load Image 3
        ImageIcon icon3 = new ImageIcon("images/" + fake2.getLogo() + ".jpg");
        jLabel4.setIcon(icon3);
        jLabel4.setText("");
        jLabel4.setMinimumSize(size);
        jLabel4.setPreferredSize(size);
        jLabel4.setMaximumSize(size);
        System.out.println("Done");
    }

    private void loadItemsIntoComboBox()
    {
        itemCombo.removeAllItems();
        for (Product item : Globals.productList)
        {
            System.out.println("Item..." + item.getName());
            itemCombo.addItem(item.getName());
        }
    }

    private Product generateRandomFake(Product proToBeLoaded) throws ParseException
    {
        Product p = new Product(proToBeLoaded);

        Random r = new Random();
        int changeAtt = r.nextInt();
        if (changeAtt < 0)
        {
            changeAtt *= (-1);
        }

        changeAtt = changeAtt % 5;

        switch (changeAtt)
        {
            case 0:
                //Change Barcode
                if (proToBeLoaded.getBarcode() != null)
                {
                    p.setBarcode("");
                }
                break;

            case 1:
                // Change Neutritient Value
                p.setNutrientValue("");
                break;

            case 2:
                // Change Logo
                p.setLogo(proToBeLoaded.getLogo() + "_fake");
                break;

            case 3:
                // change expiry date
                Calendar currentDate = Calendar.getInstance(); //Get the current date
                currentDate.add(Calendar.DAY_OF_MONTH, -1); // Yesterday's Date
                SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy"); //format it as per your requirement
                String dateNow = formatter.format(currentDate.getTime());
                p.setExpDate(formatter.parse(dateNow));
                p.setIsExpired(true);
                break;

            case 4:
                // Change selling price
                p.setSellingPrice(p.getPrice() + 3);
                break;
        }
        return p;
    }
}
